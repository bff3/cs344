3.1
  a.
    - depth_first_graph_search failed the easy puzzles
    - AC3 solved easy in 0.03242826461791992 s
    - backtracking_search took 7.5586700439453125 s to solve easy
    - min_conflicts failed
  b.
    i.
      with mrv it took the backtracking_search 104.27270865440369 s to complete
      the easy puzzle
    ii.
      with forward-checking and mrv the backtracking_search took 0.005750417709350586 s
      to complete the easy puzzle, 0.00821995735168457 s to complete the hard puzzle,
      and 0.03484344482421875 s to complete the hardest puzzle.

3.2
  min_conflicts had the fastest solution rate

  min_conflicts requires at least 1 step, but the size of the solution space
  determines the likelihood of a solution being stumbled upon.

solution = backtracking_search(problem, select_unassigned_variable=mrv, inference=forward_checking)
Time to complete:	0.00018930435180664062

solution = backtracking_search(problem, inference=forward_checking)
Time to complete:	0.0001316070556640625

solution = backtracking_search(problem, select_unassigned_variable=mrv)
Time to complete:	0.00012350082397460938

solution = backtracking_search(problem)
Time to complete:	6.937980651855469e-05

The default select_unassigned_variable and inference values worked the best

3.3
"""This class describes finite-domain Constraint Satisfaction Problems.
    A CSP is specified by the following inputs:
        variables   A list of variables; each is atomic (e.g. int or string).
        domains     A dict of {var:[possible_value, ...]} entries.
        neighbors   A dict of {var:[var,...]} that for each variable lists
                    the other variables that participate in constraints.
        constraints A function f(A, a, B, b) that returns true if neighbors
                    A, B satisfy the constraint when they have values A=a, B=b

    In the textbook and in most mathematical definitions, the
    constraints are specified as explicit pairs of allowable values,
    but the formulation here is easier to express and more compact for
    most cases. (For example, the n-Queens problem can be represented
    in O(n) space using this notation, instead of O(N^4) for the
    explicit representation.) In terms of describing the CSP as a
    problem, that's all there is.

    However, the class also supports data structures and methods that help you
    solve CSPs by calling a search function on the CSP. Methods and slots are
    as follows, where the argument 'a' represents an assignment, which is a
    dict of {var:val} entries:
        assign(var, val, a)     Assign a[var] = val; do other bookkeeping
        unassign(var, a)        Do del a[var], plus other bookkeeping
        nconflicts(var, val, a) Return the number of other variables that
                                conflict with var=val
        curr_domains[var]       Slot: remaining consistent values for var
                                Used by constraint propagation routines.
    The following methods are used only by graph_search and tree_search:
        actions(state)          Return a list of actions
        result(state, action)   Return a successor of state
        goal_test(state)        Return true if all constraints satisfied
    The following are just for debugging purposes:
        nassigns                Slot: tracks the number of assignments made
        display(a)              Print a human-readable representation
    """